// recorder.js
export async function requestMicPermission() {
    console.log('requestMicPermission –≤—ã–∑–≤–∞–Ω–∞');
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
      console.error('navigator.mediaDevices –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ HTTPS.');
      window.Telegram.WebApp.showAlert('–û—à–∏–±–∫–∞: –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS.');
      return false;
    }
  
    try {
      await navigator.mediaDevices.getUserMedia({ audio: true });
      console.log('–î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –ø–æ–ª—É—á–µ–Ω');
      return true;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É:', err);
      window.Telegram.WebApp.showAlert('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.');
      return false;
    }
  }
  
  export function setupRecorder(mediaRecorder, chunks, appState, audioContext, sendMelodyToChat) {
    let worker;
    let abortController = null;
  
    mediaRecorder.ondataavailable = (event) => {
      console.log('mediaRecorder.ondataavailable –≤—ã–∑–≤–∞–Ω–∞');
      if (event.data.size > 0) {
        chunks.push(event.data);
        console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ chunks, —Ä–∞–∑–º–µ—Ä:', event.data.size);
      } else {
        console.log('–ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç mediaRecorder');
      }
    };
  
    mediaRecorder.onstop = async () => {
      console.log('mediaRecorder.onstop –≤—ã–∑–≤–∞–Ω–∞');
      console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ mediaRecorder:', mediaRecorder.state);
  
      if (chunks.length === 0) {
        console.log('–û—à–∏–±–∫–∞: chunks –ø—É—Å—Ç–æ–π');
        window.Telegram.WebApp.showAlert('–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–≤—É–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏.');
        return;
      }
  
      const blob = new Blob(chunks, { type: 'audio/wav' });
      chunks.length = 0; // –û—á–∏—â–∞–µ–º chunks
      console.log('–ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–∞–∑–º–µ—Ä WAV Blob:', blob.size);
  
      if (blob.size === 0) {
        console.log('–û—à–∏–±–∫–∞: WAV Blob –ø—É—Å—Ç–æ–π');
        window.Telegram.WebApp.showAlert('–û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –¥–æ–ª—å—à–µ.');
        return;
      }
  
      try {
        console.log('–ß—Ç–µ–Ω–∏–µ WAV Blob –≤ ArrayBuffer...');
        const arrayBuffer = await blob.arrayBuffer();
        console.log('ArrayBuffer –ø–æ–ª—É—á–µ–Ω, —Ä–∞–∑–º–µ—Ä:', arrayBuffer.byteLength);
  
        console.log('–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ...');
        const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
        console.log('AudioBuffer –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', audioBuffer.duration);
  
        if (audioBuffer.duration < 1) {
          console.log('–û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è');
          window.Telegram.WebApp.showAlert('–ó–∞–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ó–∞–ø–∏—à–∏—Ç–µ –º–∏–Ω–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥—É.');
          return;
        }
  
        const channelData = audioBuffer.getChannelData(0);
        console.log('ChannelData –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞:', channelData.length);
  
        console.log('–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP3 —Å –ø–æ–º–æ—â—å—é Web Worker...');
        worker = new Worker('worker.js');
        worker.postMessage({
          channelData: Float32Array.from(channelData).map(x => x * 32767),
          sampleRate: audioBuffer.sampleRate,
        });
  
        worker.onmessage = async (e) => {
          const mp3Blob = e.data;
          console.log('–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–∞–∑–º–µ—Ä MP3 Blob:', mp3Blob.size);
  
          if (mp3Blob.size === 0) {
            console.log('–û—à–∏–±–∫–∞: MP3 Blob –ø—É—Å—Ç–æ–π');
            window.Telegram.WebApp.showAlert('–û—à–∏–±–∫–∞: MP3 —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.');
            return;
          }
  
          window.Telegram.WebApp.showAlert('–ó–∞–ø–∏—Å—å –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ!');
  
          const chatId = window.Telegram.WebApp.initDataUnsafe.user?.id;
          console.log('Chat ID:', chatId);
          if (!chatId) {
            console.log('–û—à–∏–±–∫–∞: chat_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            window.Telegram.WebApp.showAlert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Telegram.');
            return;
          }
  
          const formData = new FormData();
          formData.append('audio', mp3Blob, 'recording.mp3');
          formData.append('chat_id', chatId);
  
          console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏...');
          window.Telegram.WebApp.MainButton.setText('–û—Ç–ø—Ä–∞–≤–∫–∞...');
          window.Telegram.WebApp.MainButton.show();
          window.Telegram.WebApp.MainButton.showProgress();
  
          abortController = new AbortController();
  
          console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ fetch –∑–∞–ø—Ä–æ—Å–∞...');
          let retries = 3;
          let success = false;
          for (let i = 0; i < retries; i++) {
            try {
              const controller = new AbortController();
              const timeoutId = setTimeout(() => controller.abort(), 10000);
  
              const response = await fetch('/.netlify/functions/send-audio', {
                method: 'POST',
                body: formData,
                headers: {
                  'Accept': 'application/json',
                },
                signal: controller.signal,
              }).catch(error => {
                console.error('Network Error:', error);
                window.Telegram.WebApp.showAlert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
                throw error;
              });
  
              clearTimeout(timeoutId);
  
              const text = await response.text();
              console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, text);
  
              if (response.ok) {
                window.Telegram.WebApp.showAlert('üéß –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç —Å –±–æ—Ç–æ–º.');
                success = true;
                break;
              } else {
                throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${text}`);
              }
            } catch (error) {
              if (error.name === 'AbortError') {
                console.log('Fetch –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ —Ç–∞–π–º-–∞—É—Ç—É');
                window.Telegram.WebApp.showAlert('–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (10 —Å–µ–∫—É–Ω–¥).');
                break;
              }
              if (i === retries - 1) {
                console.log('–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å:', error.message);
                window.Telegram.WebApp.showAlert(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫: ${error.message}`);
              } else {
                console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${i + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...`);
                await new Promise(resolve => setTimeout(resolve, 2000));
              }
            }
          }
        };
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ mediaRecorder.onstop:', error.message);
        window.Telegram.WebApp.showAlert(`–û—à–∏–±–∫–∞: ${error.message}`);
      } finally {
        console.log('–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏...');
        window.Telegram.WebApp.MainButton.hideProgress();
        window.Telegram.WebApp.MainButton.hide();
        abortController = null;
      }
    };
  }
  
  export async function sendMelodyToChat(melodySrc, chatId) {
    console.log('sendMelodyToChat –≤—ã–∑–≤–∞–Ω–∞ —Å melodySrc:', melodySrc, 'chatId:', chatId);
    let abortController = null;
    try {
      const response = await fetch(melodySrc);
      const melodyBlob = await response.blob();
      console.log('–†–∞–∑–º–µ—Ä –º–µ–ª–æ–¥–∏–∏:', melodyBlob.size);
  
      if (melodyBlob.size === 0) {
        throw new Error('–§–∞–π–ª –º–µ–ª–æ–¥–∏–∏ –ø—É—Å—Ç–æ–π');
      }
  
      const formData = new FormData();
      formData.append('audio', melodyBlob, melodySrc.split('/').pop());
      formData.append('chat_id', chatId);
  
      window.Telegram.WebApp.MainButton.setText('–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–ª–æ–¥–∏–∏...');
      window.Telegram.WebApp.MainButton.show();
      window.Telegram.WebApp.MainButton.showProgress();
  
      abortController = new AbortController();
  
      const sendResponse = await fetch('/.netlify/functions/send-audio', {
        method: 'POST',
        body: formData,
        headers: {
          'Accept': 'application/json',
        },
        signal: abortController.signal,
      }).catch(error => {
        console.error('Network Error:', error);
        window.Telegram.WebApp.showAlert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
        throw error;
      });
  
      const text = await sendResponse.text();
      console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', sendResponse.status, text);
  
      if (sendResponse.ok) {
        window.Telegram.WebApp.showAlert('üéµ –ú–µ–ª–æ–¥–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç!');
      } else {
        console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', sendResponse.status, text);
        window.Telegram.WebApp.showAlert(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${text}`);
      }
    } catch (error) {
      if (error.name === 'AbortError') {
        window.Telegram.WebApp.showAlert('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
      } else {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error.message);
        window.Telegram.WebApp.showAlert(`–°–±–æ–π —Å–µ—Ç–∏: ${error.message}`);
      }
    } finally {
      window.Telegram.WebApp.MainButton.hideProgress();
      window.Telegram.WebApp.MainButton.hide();
      abortController = null;
    }
  }